doctype html
html
  head
    title
      = yield(:title) || 'Hi!'
      = " - #{site_title}"
    link href='//fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'
    link type='text/plain' rel='author' href='https://splits.io/humans.txt'
    meta name='viewport' content='width=device-width, initial-scale=1'
    = render partial: 'shared/rollbarjs'
    = javascript_pack_tag 'application', data: {turbolinks_track: 'reload'}, defer: true
    script src='https://player.twitch.tv/js/embed/v1.js' defer='defer'
    = stylesheet_link_tag :application, media: :all, data: {turbolinks_track: 'reload'}
    = csrf_meta_tag
    = render partial: 'application/favicon'
    = render partial: 'shared/twitter_card'
    = content_for(:head)
  body data-controller=controller_name data-action=action_name
    = Gon::Base.render_data
    #dropzone
      #dropzone-overlay.header style='border: none' data-turbolinks-permanent=true
        h1#droplabel.inverted Drop anywhere!
        #multiupload
          h2
            span#successful-uploads> 0
            | uploaded
          h2
            span#failed-uploads> 0
            | failures
      - unless on_landing_page?
        nav.navbar.navbar-expand-md.navbar-dark
          a.navbar-brand href=root_path
            img.logo src=asset_path('logo.svg') width='20' height='20'
            .d-none.d-xl-inline = site_title
          button.navbar-toggler type='button' data-toggle='collapse' data-target='#global-nav'
            span.navbar-toggler-icon
          .collapse.navbar-collapse#global-nav
            ul.navbar-nav.mr-auto
              li.nav-item class=('active' if request.path == new_run_path)
                a.nav-link.px-3 href=new_run_path
                  span> = icon('fas', 'cloud-upload-alt')
                  | Upload
              li.nav-item class=('active' if request.path == rivalries_path)
                a.nav-link.px-3 href=rivalries_path
                  span> = icon('fas', 'weight')
                  | My Rivals
              - if ENV['READ_ONLY_MODE'] == '1'
                li.nav-item
                  a.nav-link.px-3 href=read_only_mode_path
                    span.text-warning Read-Only Mode Active
              li.nav-item class=('active' if request.path == faq_path)
                a.nav-link.px-3 href=faq_path
                  span> = icon('fas', 'info-circle')
                  | FAQ
              = form_for(:search, method: :get, url: search_path, html: {class: 'form-inline ml-2 flex-grow-1', role: 'search'}) do |f|
                .input-group
                  = f.text_field(:q, name: :q, class: 'form-control search', value: @query, placeholder: 'Search...')
                  .input-group-append
                    = button_tag(type: 'submit', class: 'btn btn-primary', name: nil) do
                      = icon('fas', 'search')
            ul.nav.navbar-nav
              li.nav-item
                a.patreon.nav-link.px-3.border-0 href=patreon_url target='_blank'
                  img src=asset_path('patreon.svg') height='20'
              li.nav-item.d-lg-inline
                a.discord.nav-link.px-3.border-0 href='https://discord.gg/yGaxX39' target='_blank'
                  img src=asset_path('discord.svg') height='20'
              - if current_user.present?
                li.nav-item.dropdown class=('active' if on_a_profile_page?)
                  a.nav-link.dropdown-toggle.px-3 href='#' data-toggle='dropdown' role='button' aria-expanded='false'
                    - if current_user.avatar.present?
                      img.mr-2 src=current_user.avatar width=20 height=20
                    - else
                      span> = icon('fas', 'user')
                    span = current_user
                    span.caret
                  ul.dropdown-menu.mt-0.border-top-0.bg-dark role='menu'
                    li.nav-item
                      a.dropdown-item.text-secondary href=user_path(current_user)
                        => icon('fas', 'user-circle')
                        ' Profile
                      a.dropdown-item.text-secondary href=settings_path
                        => icon('fas', 'sliders-h')
                        ' Settings
                      a.dropdown-item.text-secondary href=tools_path
                        => icon('fas', 'toolbox')
                        ' Tools
                      a.dropdown-item.text-secondary href=session_path(auth_session) rel='nofollow' data-method='delete'
                        => icon('fas', 'sign-out-alt')
                        ' Sign Out
              - else
                li.nav-item: a.nav-link.px-3 href='#' data={toggle: :modal, target: '#signin'} Sign In
                #signin.modal.fade tabindex='-1' role='dialog' aria={labelledby: 'signin-label', hidden: true}
                  .modal-dialog role='document'
                    .modal-content
                      .modal-header.bg-primary
                        h5.text-light Sign In
                      .modal-body.bg-dark
                        .row
                          a.btn.btn-twitch.mx-auto href='/auth/twitch'
                            => icon('fab', 'twitch')
                            ' Sign in with Twitch
                          a.btn.btn-google.mx-auto href='/auth/google'
                            => icon('fab', 'google')
                            ' Sign in with Google
                        .row.text-light.m-2
                          p Splits I/O accounts are based strictly on linked accounts. This makes the platform simpler to
                            maintain, especially with regards to security.
                          p
                            ' We are
                            a> href='https://github.com/glacials/splits-io/issues/396' working
                            ' on adding linkless accounts.
      = render partial: 'shared/ad'
      header#header = yield(:header)
      article
        .row: .col-lg-12: #alerts data-turbolinks-temporary=true
          = render partial: 'shared/alerts'
      = yield
      - unless on_landing_page?
        footer#footer
          = yield(:footer)
          .row
            .col-md-6
              - patrons = User.includes(:patreon, :twitch).joins(:patreon).where('patreon_users.pledge_cents >= 200')
              - unless patrons.blank?
                a> href=patreon_url
                  span Thanks to our patrons!
                p
                  - patrons.each do |user|
                    span.mr-1 = user_badge(user)
            .col-md-6
              .float-right style='text-align: right;'
                a href='https://github.com/glacials/splits-io/blob/master/docs/api.md' API
                span<> &bull;
                a href='https://github.com/glacials/splits-io' Source
                span<> &bull;
                a href=brand_path Brand
                br
                a href='https://twitter.com/splitsio' Twitter
                span<> &bull;
                a href='mailto:help@splits.io' Email
