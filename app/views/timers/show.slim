- content_for(:title, @timer)
- content_for(:header)
  ol.breadcrumb.shadow
    li.breadcrumb-item = link_to(site_title, root_path)
    li.breadcrumb-item Timers
    li.breadcrumb-item = link_to(@timer, timer_path(@timer))
.row.mx-0: .col-xl-6.p-1.mx-auto.text-center.mb-4
  h2 = @timer
  - if @timer.website
    a.btn.btn-outline-primary.btn-sm href=@timer.website Website
.container: .card-deck
  .card.mb-2.col-md-6
    .card-header Uploading
    .card-body
      h2 #{@timer} → Splits.io
      - if @timer.exchangeable?
        p
          ' #{@timer} supports the generic
          a href=Programs::ExchangeFormat.website Splits.io Exchange Format
          ' , so Splits.io can read files exported from #{@timer} in this format. These files have the extension
          code .#{Programs::ExchangeFormat.file_extension}
          ' .
        - if @timer.exportable?
          p
            ' Splits.io also has limited support for reading #{@timer}'s
            ' proprietary format. These files use the extension
            code .#{@timer.file_extension}
            ' .
      - else
        p
          ' #{@timer} does not support the generic
          a href=Programs::ExchangeFormat.website Splits.io Exchange Format
          ' , so it cannot output runs in the standard format.
        p
          ' However, Splits.io has limited support for reading #{@timer}'s proprietary format. These files use the
          ' extension
          code .#{@timer.file_extension}
          ' .
  .card.mb-2.col-md-6
    .card-header Downloading
    .card-body
      h2 Splits.io → #{@timer}
      - if @timer.exchangeable?
        p
          ' #{@timer} supports the
          a href=Programs::ExchangeFormat.website Splits.io Exchange Format
          ' , so it can read any run on Splits.io. Look for the
          ' "#{Programs::ExchangeFormat}" option when exporting a run from Splits.io.
        - if @timer.exportable?
          p
            ' Splits.io can also try to export runs in #{@timer} format. Look for the "#{@timer}" option when exporting a run from Splits.io.
      - else
        p
          ' #{@timer} doesn't support the
          a href=Programs::ExchangeFormat.website = Programs::ExchangeFormat
          ' , so it can't read most runs from Splits.io.
        - if @timer.exportable?
          p
            ' However, Splits.io can try to export runs in #{@timer} format. Look for the "#{@timer}" option when exporting a run from Splits.io.
  .card.mb-2.col-md-6
    .card-header Developer information
    .card-body
      - if @timer.content_type == 'application/splitsio' # This timer is native to the Splits.io Exchange Format; there is no other format for it
        p #{@timer}'s native format is the #{Programs::ExchangeFormat}. Requesting #{@timer} runs with either of these headers will have the same result:
        p
          code Accept: #{@timer.content_type}
          br
          code Accept: application/original-timer
        p #{@timer} runs requested with either header will contain this header in the response:
        p: code Content-Type: #{@timer.content_type}
      - else
        - if @timer.exportable?
          p
            ' You can request runs from the API in #{@timer} format using this header:
          p: code Accept: #{@timer.content_type}
        - else
          p
            ' You cannot request arbitrary runs from the API in #{@timer} format. Runs originally uploaded in
            ' #{@timer} format can be fetched in that same way using the header:
            p: code Accept: application/original-timer
        p
          ' Runs returned in #{@timer} format include the header:
          p: code Content-Type: #{@timer.content_type}
