- timing = Run::REAL
- add_ghost = local_assigns.fetch(:add_ghost, true)

h6.card-header Entries
- if race.entries.none?
  .card-body: i No one here
- else
  .table-responsive: table.card-body.table.mb-0
    thead: tr
      th.nowrap Name
      th.nowrap PB
      th.nowrap.text-center
        - if race.started?
          ' Position
        - else
          ' Ready
      th Time
      th.nowrap.text-center.w-100 Splits
      th.nowrap.text-center Stats
      th.nowrap.text-center Links
    tbody
      - race.entries.includes(:runner).order('finished_at ASC NULLS LAST, forfeited_at ASC NULLS FIRST, readied_at ASC NULLS LAST, created_at ASC').each do |entry|
        tr style=('filter: grayscale(100%)' if entry.ghost?)
          td.nowrap
            - if entry.ghost?
              big.mr-2 v-tippy=true title="Ghost of #{entry.runner ? entry.runner.to_s + "'s" : 'a'} past run ðŸ˜±"
                = icon('fas', 'ghost')
            span.mr-2 = user_badge(entry.runner)
          td.nowrap
            - pb = entry.runner&.pb_for(Run::REAL, race.category)
            - if pb
              small
                .text-monospace = pb.duration(Run::REAL).format
                => pb.attempts
                ' attempts
            - else
              ' -
          td.nowrap.text-center
            - if race.started?
              - if entry.done?
                b class=entry_color(entry) = entry_place(entry)
              - else
                b = entry_place(entry)
            - else
              = entry.ready? ? icon('fas', 'check', class: 'text-success') : icon('fas', 'times', class: 'text-danger')
          td.nowrap.text-monospace
            - if entry.done? && (entry.finished_at.nil? || entry.finished_at < Time.now.utc)
              b class=entry_color(entry) = entry.duration.format(precise: true)
            - elsif race.started?
              i In progress
          td.nowrap.p-0 style='filter: grayscale(.5); max-width: 200px'
            - if entry.run
              small
                - segments = Segment.joins(run: :entry).where(run: {entries: {id: race.entries}})
                - last_segment = segments.where(segment_number: segments.maximum(:segment_number))
                = render partial: 'runs/timeline', locals: { \
                  timing: Run::REAL,
                  run: entry.run,
                  scale_to: Run.joins(:entry).where(entries: {id: race.entries}).maximum(:realtime_duration_ms),
                }
          td.nowrap.text-center
            - if entry.runner.present?
              span.badge.badge-dark.mr-2
                => icon('fas', 'medal')
                span.text-gold = entry.runner.entries.first_place.count
              span.badge.badge-dark
                => icon('fas', 'flag-checkered')
                b.text-success = entry.runner.entries.where.not(finished_at: nil).count
                span.text-secondary = '/'
                span.text-danger = entry.runner.entries.where.not(forfeited_at: nil).count
          td.nowrap.text-center
            - if entry.runner.try(:twitch).try(:present?)
              a.text-light.tip.mr-2 href=entry.runner.twitch.url title='Watch on Twitch'
                = icon('fab', 'twitch')
            - if entry.run.present?
              a.text-light.tip.mr-2 href=run_path(entry.run) title='See associated run'
                = icon('fas', 'scroll')
- if !race.started? && add_ghost
  .card-footer.clearfix: .float-right
    = form_for(:entry, remote: true, url: api_v4_race_entries_path(race.id), html: {class: 'auth-me'}) do |f|
      .input-group
        = f.text_field(:run_id, class: 'form-control', placeholder: 'Run ID; e.g. g23b', id: 'ghost-input')
        .input-group-append
          = f.submit('Add ghost', class: 'btn btn-secondary', data: {disable_with: 'Adding'})
